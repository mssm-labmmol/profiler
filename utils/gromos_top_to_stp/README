# Description

`gromos_top_to_stp` is a C program to convert GROMOS topology files to .stp files supported in `profilerTools`.
It is intended to facilitate the use of `profilerTools` to GROMOS software users.

# Installation

To install, follow the usual routine for Linux programs. We suggest the following.

1. Create a build directory and go into it:

		mkdir build
		cd build

2. Configure the Makefile to install the program at /usr/local with

		../configure

	or at another path with

		../configure --prefix=/path/of/prefix

3. Compile:

		make

4. Install (sudo may be required depending on the chosen installation path):

		(sudo) make install

# Usage

The program converts each file of a list of input GROMOS topology files to a corresponding .stp file. Its usage is as follows:

    gromos_top_to_stp

    -t LIST_OF_TOPOLOGIES
		List of input topology files with extension '.top' separated by
		spaces. Each file NAME.top is converted to NAME.stp. The '.top'
		extension is enforced to avoid renaming problems.

The output .stp files do not contain the blocks that specify reference dihedrals, optimizable dihedrals or optimizable atoms/pairs.
You have to include them manually.
		
# Example

Assume that the files `pentane.top` and `hexane.top` are GROMOS topologies for the pentane (CH3-CH2-CH2-CH2-CH3) and hexane (CH3-CH2-CH2-CH2-CH2-CH3) molecules, respectively.
Consider:

* 

		gromos_top_to_stp -t pentane.top hexane.top
		
	The .stp output files will be written without any of the blocks `[ refdihedral ]`, `[ optdihedrals ]`, `[ optpairs ]` or `[ optatoms ]`. The interactive interface will not be invoked.


# Hard-coded Limits

The implementation of `gromos_top_to_stp` relies heavily on static arrays.
Their sizes depend on the values of several pre-processing macros, which are listed below together with their meaning and the source file of origin:

	src/forcefield.h:#define  FF_N_ATOMTYPES_MAX_SIZE   500    // Maximum number of atom types in force field
	src/forcefield.h:#define  FF_N_PAIRTYPES_MAX_SIZE   125000 // Maximum number of pair types in force field
	src/forcefield.h:#define  FF_N_BONDS_MAX_SIZE   5000       // Maximum number of bond types in force field
	src/forcefield.h:#define  FF_N_ANGLES_MAX_SIZE  5000       // Maximum number of angle types in force field
	src/forcefield.h:#define  FF_N_DIH_MAX_SIZE     5000       // Maximum number of proper-dihedral types in force field
	src/forcefield.h:#define  FF_N_IDIH_MAX_SIZE    5000       // Maximum number of improper-dihedral types in force field
	src/topo.h:#define  N_ATOMS_MAX_SIZE   100                 // Maximum number of atoms in a topology
	src/topo.h:#define  N_BONDS_MAX_SIZE   400                 // Maximum number of bonds in a topology
	src/topo.h:#define  N_ANGLES_MAX_SIZE  400                 // Maximum number of angles in a topology
	src/topo.h:#define  N_DIH_MAX_SIZE     100                 // Maximum number of proper dihedrals in a topology
	src/topo.h:#define  N_IDIH_MAX_SIZE    100                 // Maximum number of improper dihedrals in a topology
	src/topo.h:#define  N_EXCL_MAX_SIZE   1000                 // Maximum number of exclusions in a topology
	src/topo.h:#define  N_PAIRS_MAX_SIZE   1000                // Maximum number of nonbonded pairs in a topology
	
If you are having errors and find out that one or more of these limits is too small for your needs, you can adjust them based on the information above. However, if this is the case, you are most likely dealing with a system that has too many atoms to be used in `profilerTools` efficiently.
